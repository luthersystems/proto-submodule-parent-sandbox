// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: srvpb/v1/worldstate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorldstateService_GetHealthCheck_FullMethodName   = "/srvpb.v1.WorldstateService/GetHealthCheck"
	WorldstateService_CreateWorldState_FullMethodName = "/srvpb.v1.WorldstateService/CreateWorldState"
	WorldstateService_GetWorldState_FullMethodName    = "/srvpb.v1.WorldstateService/GetWorldState"
)

// WorldstateServiceClient is the client API for WorldstateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorldstateService defines the public API for managing world state
type WorldstateServiceClient interface {
	GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*GetHealthCheckResponse, error)
	CreateWorldState(ctx context.Context, in *CreateWorldStateRequest, opts ...grpc.CallOption) (*CreateWorldStateResponse, error)
	GetWorldState(ctx context.Context, in *GetWorldStateRequest, opts ...grpc.CallOption) (*GetWorldStateResponse, error)
}

type worldstateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldstateServiceClient(cc grpc.ClientConnInterface) WorldstateServiceClient {
	return &worldstateServiceClient{cc}
}

func (c *worldstateServiceClient) GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*GetHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, WorldstateService_GetHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldstateServiceClient) CreateWorldState(ctx context.Context, in *CreateWorldStateRequest, opts ...grpc.CallOption) (*CreateWorldStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorldStateResponse)
	err := c.cc.Invoke(ctx, WorldstateService_CreateWorldState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldstateServiceClient) GetWorldState(ctx context.Context, in *GetWorldStateRequest, opts ...grpc.CallOption) (*GetWorldStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorldStateResponse)
	err := c.cc.Invoke(ctx, WorldstateService_GetWorldState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldstateServiceServer is the server API for WorldstateService service.
// All implementations must embed UnimplementedWorldstateServiceServer
// for forward compatibility.
//
// WorldstateService defines the public API for managing world state
type WorldstateServiceServer interface {
	GetHealthCheck(context.Context, *GetHealthCheckRequest) (*GetHealthCheckResponse, error)
	CreateWorldState(context.Context, *CreateWorldStateRequest) (*CreateWorldStateResponse, error)
	GetWorldState(context.Context, *GetWorldStateRequest) (*GetWorldStateResponse, error)
	mustEmbedUnimplementedWorldstateServiceServer()
}

// UnimplementedWorldstateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorldstateServiceServer struct{}

func (UnimplementedWorldstateServiceServer) GetHealthCheck(context.Context, *GetHealthCheckRequest) (*GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthCheck not implemented")
}
func (UnimplementedWorldstateServiceServer) CreateWorldState(context.Context, *CreateWorldStateRequest) (*CreateWorldStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorldState not implemented")
}
func (UnimplementedWorldstateServiceServer) GetWorldState(context.Context, *GetWorldStateRequest) (*GetWorldStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldState not implemented")
}
func (UnimplementedWorldstateServiceServer) mustEmbedUnimplementedWorldstateServiceServer() {}
func (UnimplementedWorldstateServiceServer) testEmbeddedByValue()                           {}

// UnsafeWorldstateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldstateServiceServer will
// result in compilation errors.
type UnsafeWorldstateServiceServer interface {
	mustEmbedUnimplementedWorldstateServiceServer()
}

func RegisterWorldstateServiceServer(s grpc.ServiceRegistrar, srv WorldstateServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorldstateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorldstateService_ServiceDesc, srv)
}

func _WorldstateService_GetHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldstateServiceServer).GetHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldstateService_GetHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldstateServiceServer).GetHealthCheck(ctx, req.(*GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldstateService_CreateWorldState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldstateServiceServer).CreateWorldState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldstateService_CreateWorldState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldstateServiceServer).CreateWorldState(ctx, req.(*CreateWorldStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldstateService_GetWorldState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldstateServiceServer).GetWorldState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorldstateService_GetWorldState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldstateServiceServer).GetWorldState(ctx, req.(*GetWorldStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldstateService_ServiceDesc is the grpc.ServiceDesc for WorldstateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldstateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srvpb.v1.WorldstateService",
	HandlerType: (*WorldstateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealthCheck",
			Handler:    _WorldstateService_GetHealthCheck_Handler,
		},
		{
			MethodName: "CreateWorldState",
			Handler:    _WorldstateService_CreateWorldState_Handler,
		},
		{
			MethodName: "GetWorldState",
			Handler:    _WorldstateService_GetWorldState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srvpb/v1/worldstate.proto",
}
